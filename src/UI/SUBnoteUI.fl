# data file for the Fltk User Interface Designer (fluid)
version 1.0303
header_name {.h}
code_name {.cc}
comment {SubNoteUI.h} {not_in_source in_header
}

comment {SubNoteUI.cc} {in_source not_in_header
}

comment {Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009-2011, Alan Calvert
Copyright 2015-2016, Will Godfreyt

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is derivative of ZynAddSubFX original code, modified September 2014
} {in_source in_header
}

decl {\#include "WidgetPDialUI.h"} {public local
}

decl {\#include "EnvelopeUI.h"} {public local
}

decl {\#include "FilterUI.h"} {public local
}

decl {\#include "PresetsUI.h"} {public local
}

decl {\#include "Misc/SynthHelper.h"} {public local
}

decl {\#include "Params/SUBnoteParameters.h"} {public local
}

decl {\#include "Misc/SynthEngine.h"} {public global
}

decl {\#include "MasterUI.h"} {private global
}

class SUBnoteharmonic {: {public Fl_Group}
} {
  Function {make_window()} {private
  } {
    Fl_Window harmonic {
      xywh {558 534 90 310} type Double hide
      class Fl_Group
    } {
      Fl_Slider mag {
        callback {int x=0;
if (Fl::event_button1()) x=127-(int)o->value();
   else o->value(127-x);
pars->Phmag[n]=x;
if (pars->Phmag[n]==0) o->selection_color(0);
    else o->selection_color(222);}
        tooltip {harmonic's magnitude} xywh {0 15 10 131} type {Vert Knob} box FLAT_BOX selection_color 222 maximum 127 step 1 value 127
        code0 {o->value(127-pars->Phmag[n]);}
        code1 {if (pars->Phmag[n]==0) o->selection_color(0);}
      }
      Fl_Slider bw {
        callback {int x=64;
if (Fl::event_button1()) x=127-(int)o->value();
   else o->value(x);
pars->Phrelbw[n]=x;
if (pars->Phrelbw[n]==64) o->selection_color(0);
    else o->selection_color(222);}
        tooltip {harmonic's bandwidth} xywh {0 156 10 126} type {Vert Knob} box FLAT_BOX selection_color 222 maximum 127 step 1 value 64
        code0 {o->value(127-pars->Phrelbw[n]);}
        code1 {if (pars->Phrelbw[n]==64) o->selection_color(0);}
      }
      Fl_Box {} {
        xywh {10 216 5 5} box FLAT_BOX color 39
        code0 {if (n+1==MAX_SUB_HARMONICS) o->hide();}
      }
      Fl_Box {} {
        label 01
        xywh {0 285 10 15} labelfont 1 labelsize 9 align 20
        code0 {char tmp[10];snprintf(tmp,10,"%d",n+1);o->label(strdup(tmp));}
      }
      Fl_Box {} {
        label 01
        xywh {0 0 10 15} labelfont 1 labelsize 9 align 20
        code0 {char tmp[10];snprintf(tmp,10,"%d",n+1);o->label(strdup(tmp));}
      }
    }
  }
  Function {SUBnoteharmonic(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {} {
    code {n=0;} {}
  }
  Function {init(SUBnoteParameters *pars_,int n_)} {} {
    code {pars=pars_;
n=n_;
make_window();
harmonic->show();
end();} {}
  }
  Function {refresh()} {} {
    code {mag->value(127-pars->Phmag[n]);
if (pars->Phmag[n]==0) mag->selection_color(0);
bw->value(127-pars->Phrelbw[n]);} {}
  }
  Function {~SUBnoteharmonic()} {} {
    code {harmonic->hide();
hide();
//delete(harmonic);} {}
  }
  decl {SUBnoteParameters *pars;} {private local
  }
  decl {int n;} {private local
  }
}

class SUBnoteUI {selected : {public PresetsUI_, SynthHelper}
} {
  Function {make_window()} {} {
    Fl_Window SUBparameters {
      label {SUBsynth Parameters}
      xywh {6 183 735 475} type Double hide
      code0 {o->copy_label(synth->getGuiMaster()->setPartWindowTitle("SubSynth").c_str());}
      code1 {o->position(synth->getGuiMaster()->subNoteX, synth->getGuiMaster()->subNoteY);}
    } {
      Fl_Scroll {} {
        xywh {5 140 434 325} type HORIZONTAL box THIN_UP_BOX
      } {
        Fl_Pack harmonics {open
          xywh {10 145 425 325} type HORIZONTAL
          code0 {for (int i=0;i<MAX_SUB_HARMONICS;i++){h[i]=new SUBnoteharmonic(0,0,15,o->h(),"");h[i]->init(pars,i);}}
        } {}
      }
      Fl_Button {} {
        label Close
        callback {synth->getGuiMaster()->subNoteX = SUBparameters->x();
synth->getGuiMaster()->subNoteY = SUBparameters->y();
SUBparameters->hide();
if ((Fl::event_button() == 3))
{
    if (synth->getGuiMaster()->partui->partKitOn)
        synth->getGuiMaster()->partui->instrumentkitlist->show();
    else
        synth->getGuiMaster()->partui->instrumenteditwindow->show();
}}
        xywh {625 446 105 20} box THIN_UP_BOX labelfont 1 labelsize 11
      }
      Fl_Group {} {
        label AMPLITUDE
        xywh {5 5 215 135} box THIN_UP_FRAME labelfont 1 labelsize 12 align 17
      } {
        Fl_Dial vol {
          label Volume
          callback {pars->PVolume = (int)o->value();}
          tooltip Volume xywh {40 20 29 29} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->value(pars->PVolume);}
          class WidgetPDial
        }
        Fl_Dial vsns {
          label {Veloc Sens}
          callback {pars->PAmpVelocityScaleFunction = (int) o->value();}
          tooltip {Velocity sensing} xywh {101 20 29 29} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->value(pars->PAmpVelocityScaleFunction);}
          class WidgetPDial
        }
        Fl_Dial pan {
          label Pan
          callback {//
              pars->setPan((char)o->value());
              randompan->value(pars->randomPan());}
          tooltip {Panning - zero/leftmost is Random} xywh {160 20 29 29} box ROUND_UP_BOX labelsize 10 align 6 maximum 127 step 1
          code0 {o->value(pars->PPanning);}
          class WidgetPDial
        }
        Fl_Light_Button randompan {
          label Rand
          callback {//
              if (pars->randomPan()) // set to full left
              {
                  pars->setPan(1);
                  pan->value(1);
              }
              o->value(pars->randomPan());}
          xywh {182 49 13 13} box NO_BOX color 35 selection_color 88 labelsize 10
          code0 {o->value(pars->randomPan());}
        }
        Fl_Button {} {
          label Centre
          callback {//
              pan->value(64);
              pars->setPan(64);
              randompan->value(pars->randomPan());}
          tooltip {Centre panning} xywh {192 32 10 10} box PLASTIC_ROUND_UP_BOX color 1 selection_color 1 labeltype NO_LABEL labelsize 10
        }
        Fl_Group ampenv {
          label {SUBsynth - Amplitude Envelope}
          xywh {10 65 205 70} box FLAT_BOX color 51 align 144
          code0 {o->init(pars->AmpEnvelope);}
          class EnvelopeUI
        } {}
      }
      Fl_Group {} {
        xywh {495 406 235 35} box THIN_UP_FRAME
      } {
        Fl_Counter filterstages {
          label {Filter Stages}
          callback {pars->Pnumstages = (int) o->value();}
          tooltip {How many times the noise is filtered} xywh {515 421 45 15} type Simple labelfont 1 labelsize 10 align 1 minimum 1 maximum 5 step 1 textsize 10
          code0 {o->value(pars->Pnumstages);}
        }
        Fl_Choice magtype {
          label {Mag.Type}
          callback {pars->Phmagtype = (int) o->value();}
          xywh {585 421 65 15} down_box BORDER_BOX labelfont 1 labelsize 10 align 1 textsize 11
          code0 {o->value(pars->Phmagtype);}
        } {
          MenuItem {} {
            label Linear
            xywh {20 20 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {-40dB}
            xywh {30 30 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {-60dB}
            xywh {40 40 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {-80dB}
            xywh {50 50 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {-100dB}
            xywh {60 60 100 20} labelfont 1 labelsize 11
          }
        }
        Fl_Choice start {
          label Start
          callback {pars->Pstart = (int) o->value();}
          xywh {670 421 50 15} down_box BORDER_BOX labelfont 1 labelsize 10 align 1 textsize 11
          code0 {o->value(pars->Pstart);}
        } {
          MenuItem {} {
            label Zero
            xywh {30 30 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label RND
            xywh {40 40 100 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label {Max.}
            xywh {50 50 100 20} labelfont 1 labelsize 11
          }
        }
      }
      Fl_Group freqsettingsui {
        label FREQUENCY
        xywh {440 5 290 135} box THIN_UP_FRAME labelfont 1 labelsize 12 align 17
      } {
        Fl_Group freqenvelopegroup {
          label {SUBsynth - Frequency Envelope}
          xywh {445 65 205 70} box FLAT_BOX color 51 align 144
          code0 {o->init(pars->FreqEnvelope);}
          code1 {if (pars->PFreqEnvelopeEnabled == 0) o->deactivate();}
          class EnvelopeUI
        } {}
        Fl_Check_Button freqee {
          label Enabled
          callback {//
              pars->PFreqEnvelopeEnabled = o->value();
              if (o->value() == 0)
                  freqenvelopegroup->deactivate();
              else
                  freqenvelopegroup->activate();
              o->show();
              freqsettingsui->redraw();}
          xywh {445 68 55 15} down_box DOWN_BOX labelfont 1 labelsize 10
          code0 {o->value(pars->PFreqEnvelopeEnabled);}
        }
        Fl_Counter octave {
          label Octave
          callback {//
              int k = (int) o->value();
              if (k < 0)
                  k += 16;
              pars->PCoarseDetune = k * 1024 + pars->PCoarseDetune % 1024;}
          tooltip Octave xywh {670 50 45 15} type Simple labelsize 10 align 1 minimum -8 maximum 7 step 1 textfont 1 textsize 11
          code0 {int k=pars->PCoarseDetune/1024;if (k>=8) k-=16;}
          code2 {o->value(k);}
        }
        Fl_Counter coarsedet {
          label {Coarse Det.}
          callback {//
              int k = (int) o->value();
              if (k < 0)
                  k += 1024;
              pars->PCoarseDetune = k + (pars->PCoarseDetune / 1024) * 1024;}
          tooltip {Coarse Detune} xywh {655 115 60 20} labelsize 10 align 1 minimum -64 maximum 63 step 1 textfont 1 textsize 11
          code0 {int k=pars->PCoarseDetune%1024;if (k>=512) k-=1024;}
          code2 {o->value(k);}
          code3 {o->lstep(10);}
        }
        Fl_Slider detune {
          callback {//
              pars->PDetune = (int)o->value() + 8192;
              detunevalueoutput->do_callback();}
          tooltip {Fine Detune (cents)} xywh {495 25 230 15} type {Horz Knob} box FLAT_BOX minimum -8192 maximum 8191 step 1
          code0 {o->value(pars->PDetune-8192);}
        }
        Fl_Value_Output detunevalueoutput {
          label Detune
          callback {o->value(getDetune(pars->PDetuneType,0,pars->PDetune));}
          xywh {448 25 45 15} labelsize 10 align 5 minimum -5000 maximum 5000 textfont 1 textsize 10
          code0 {o->step(0.01, 1);}
          code1 {o->value(getDetune(pars->PDetuneType,0,pars->PDetune));}
        }
        Fl_Check_Button hz440 {
          label 440Hz
          callback {//
              int x = (int) o->value();
              pars->Pfixedfreq = x;
              if (x == 0)
                  fixedfreqetdial->deactivate();
              else fixedfreqetdial->activate();}
          tooltip {set the base frequency to 440Hz} xywh {555 45 50 15} down_box DOWN_BOX labelfont 1 labelsize 10
          code0 {o->value(pars->Pfixedfreq);}
        }
        Fl_Dial fixedfreqetdial {
          label {Eq.T.}
          callback {pars->PfixedfreqET=(int) o->value();}
          tooltip {How the frequency varies according to the keyboard (leftmost for fixed frequency)} xywh {610 45 15 15} box ROUND_UP_BOX labelsize 10 align 8 maximum 127 step 1
          code0 {o->value(pars->PfixedfreqET);}
          code1 {if (pars->Pfixedfreq==0) o->deactivate();}
          class WidgetPDial
        }
        Fl_Choice detunetype {
          label {Detune Type}
          callback {//
              pars->PDetuneType = (int) o->value() + 1;
              detunevalueoutput->do_callback();}
          xywh {655 85 70 15} down_box BORDER_BOX labelsize 10 align 5 textfont 1 textsize 10
          code0 {o->add("L35cents");o->add("L10cents");o->add("E100cents");o->add("E1200cents");}
          code1 {o->value(pars->PDetuneType-1);}
        } {}
      }
      Fl_Check_Button stereo {
        label Stereo
        callback {pars->Pstereo=(int) o->value();}
        xywh {440 406 55 35} box THIN_UP_BOX down_box DOWN_BOX labelfont 1 labelsize 10
        code0 {o->value(pars->Pstereo);}
      }
      Fl_Button {} {
        label Clear
        callback {//
            for (int i = 0; i < MAX_SUB_HARMONICS; i++)
            {
                h[i]->mag->value(127);
                h[i]->mag->selection_color(0);
                pars->Phmag[i] = 0;
                h[i]->bw->value(64);
                h[i]->bw->selection_color(0);
                pars->Phrelbw[i] = 64;
            }
            pars->Phmag[0] = 127;
            h[0]->mag->selection_color(222);
            h[0]->mag->value(0);
            SUBparameters->redraw();}
        tooltip {Clear the harmonics} xywh {445 446 70 20} box THIN_UP_BOX labelfont 1 labelsize 11
      }
      Fl_Group bandwidthsettingsui {
        label BANDWIDTH
        xywh {220 5 220 135} box THIN_UP_FRAME labelfont 1 labelsize 12 align 17
      } {
        Fl_Group bandwidthenvelopegroup {
          label {SUBsynth - BandWidth Envelope}
          xywh {225 65 205 70} box FLAT_BOX color 51 align 144
          code0 {o->init(pars->BandWidthEnvelope);}
          code1 {if (pars->PBandWidthEnvelopeEnabled==0) o->deactivate();}
          class EnvelopeUI
        } {}
        Fl_Check_Button bwee {
          label Enabled
          callback {//
              pars->PBandWidthEnvelopeEnabled = o->value();
              if (o->value() == 0)
                  bandwidthenvelopegroup->deactivate();
              else
                  bandwidthenvelopegroup->activate();
              o->show();
              bandwidthsettingsui->redraw();}
          xywh {225 67 55 15} down_box DOWN_BOX labelfont 1 labelsize 10
          code0 {o->value(pars->PBandWidthEnvelopeEnabled);}
        }
        Fl_Value_Slider bandwidth {
          label {Band Width}
          callback {pars->Pbandwidth=(int) o->value();}
          xywh {225 40 115 15} type {Horz Knob} box FLAT_BOX labelsize 10 align 1 maximum 127 step 1
          code0 {o->value(pars->Pbandwidth);}
        }
        Fl_Value_Slider bwidthscale {
          label {B.Width Scale}
          callback {pars->Pbwscale=(int) o->value()+64;}
          tooltip {How much I increase the BandWidth according to lower/higher harmonics} xywh {345 40 90 15} type {Horz Knob} box FLAT_BOX labelsize 10 align 1 minimum -64 maximum 63 step 1
          code0 {o->value(pars->Pbwscale-64);}
        }
      }
      Fl_Group globalfiltergroup {
        label FILTER
        xywh {440 221 290 185} box THIN_UP_FRAME labelfont 1 labelsize 12 align 17
        code0 {if (pars->PGlobalFilterEnabled==0) o->deactivate();}
      } {
        Fl_Group filterenv {
          label {SUBsynth - Filter Envelope}
          xywh {445 331 275 70} box FLAT_BOX color 51 align 144
          code0 {o->init(pars->GlobalFilterEnvelope);}
          class EnvelopeUI
        } {}
        Fl_Group filterui {
          label {SUBsynthl - Filter}
          xywh {445 246 275 75} box FLAT_BOX color 50 align 144
          code0 {o->init(pars->GlobalFilter,&pars->PGlobalFilterVelocityScale,&pars->PGlobalFilterVelocityScaleFunction, npart, kititem, 2);}
          class FilterUI
        } {}
      }
      Fl_Check_Button filtere {
        label Enabled
        callback {//
            pars->PGlobalFilterEnabled = o->value();
            if (o->value() == 0)
                globalfiltergroup->deactivate();
            else
                globalfiltergroup->activate();
            o->show();
            globalfiltergroup->redraw();}
        xywh {445 226 85 20} down_box DOWN_BOX labelfont 1 labelsize 11
        code0 {o->value(pars->PGlobalFilterEnabled);}
      }
      Fl_Button {} {
        label C
        callback {synth->getGuiMaster()->getPresetsUi()->copy(pars);}
        xywh {540 449 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
      Fl_Button {} {
        label P
        callback {synth->getGuiMaster()->getPresetsUi()->paste(pars,this);}
        xywh {576 449 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
      Fl_Group {} {
        label OVERTONES
        xywh {440 140 290 81} box THIN_UP_FRAME labelfont 1 labelsize 12 align 17
      } {
        Fl_Choice spreadtype {
          label {Overtones  Position}
          callback {pars->POvertoneSpread.type = (int)o->value();
pars->updateFrequencyMultipliers();}
          xywh {460 171 87 20} down_box BORDER_BOX labelsize 10 align 2 textsize 10
          code0 {o->value(pars->POvertoneSpread.type);}
        } {
          MenuItem {} {
            label Harmonic
            xywh {5 5 34 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label ShiftU
            xywh {15 15 34 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label ShiftL
            xywh {25 25 34 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label PowerU
            xywh {25 25 34 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label PowerL
            xywh {35 35 34 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Sine
            xywh {45 45 34 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Power
            xywh {55 55 34 20} labelfont 1 labelsize 11
          }
          MenuItem {} {
            label Shift
            xywh {25 25 34 20} labelfont 1 labelsize 11
          }
        }
        Fl_Dial spreadpar1 {
          label Par1
          callback {pars->POvertoneSpread.par1 = o->value();
pars->updateFrequencyMultipliers();}
          xywh {572 166 30 30} box ROUND_UP_BOX labelsize 10 maximum 255 step 1
          code0 {o->value(pars->POvertoneSpread.par1);}
          class WidgetPDial
        }
        Fl_Dial spreadpar2 {
          label Par2
          callback {pars->POvertoneSpread.par2 = o->value();
pars->updateFrequencyMultipliers();}
          xywh {626 166 30 30} box ROUND_UP_BOX labelsize 10 maximum 255 step 1
          code0 {o->value(pars->POvertoneSpread.par2);}
          class WidgetPDial
        }
        Fl_Dial spreadpar3 {
          label ForceH
          callback {pars->POvertoneSpread.par3 = o->value();
pars->updateFrequencyMultipliers();}
          xywh {680 166 30 30} box ROUND_UP_BOX labelsize 10 maximum 255 step 1
          code0 {o->value(pars->POvertoneSpread.par3);}
          class WidgetPDial
        }
      }
    }
  }
  Function {refresh()} {} {
    code {//
        for (int i = 0; i < MAX_SUB_HARMONICS; ++i)
            h[i]->refresh();
        vol->value(pars->PVolume);
        vsns->value(pars->PAmpVelocityScaleFunction);
        pan->value(pars->PPanning);

        bandwidth->value(pars->Pbandwidth);
        bwidthscale->value(pars->Pbwscale-64);
        bwee->value(pars->PBandWidthEnvelopeEnabled);
        if (pars->PBandWidthEnvelopeEnabled == 0)
            bandwidthenvelopegroup->deactivate();
        else
            bandwidthenvelopegroup->activate();
        bwee->show();
        bandwidthsettingsui->redraw();

        detunevalueoutput->value(getDetune(pars->PDetuneType,0,pars->PDetune));
        freqee->value(pars->PFreqEnvelopeEnabled);
        if (pars->PFreqEnvelopeEnabled == 0)
            freqenvelopegroup->deactivate();
        else
            freqenvelopegroup->activate();
        freqee->show();
        freqsettingsui->redraw();

        detune->value(pars->PDetune - 8192);
        hz440->value(pars->Pfixedfreq);

        fixedfreqetdial->value(pars->PfixedfreqET);

        int k = pars->PCoarseDetune / 1024;
        if (k >= 8)
            k -= 16;
        octave->value(k);

        detunetype->value(pars->PDetuneType - 1);

        k = pars->PCoarseDetune % 1024;
        if (k >= 512)
            k -= 1024;
        coarsedet->value(k);

        filtere->value(pars->PGlobalFilterEnabled);
        if (pars->PGlobalFilterEnabled == 0)
            globalfiltergroup->deactivate();
        else
            globalfiltergroup->activate();
        filtere->show();
        globalfiltergroup->redraw();

        stereo->value(pars->Pstereo);
        filterstages->value(pars->Pnumstages);
        magtype->value(pars->Phmagtype);
        start->value(pars->Pstart);

        ampenv->refresh();
        bandwidthenvelopegroup->refresh();
        freqenvelopegroup->refresh();
        filterui->refresh();
        filterenv->refresh();} {}
  }
  Function {SUBnoteUI(SUBnoteParameters *parameters, int npart_, int kititem_)} {} {
    code {pars = parameters;
synth = pars->getSynthEngine();
npart = npart_;
kititem = kititem_;
make_window();} {}
  }
  Function {~SUBnoteUI()} {return_type virtual
  } {
    code {//
    SUBparameters->hide();
    delete(SUBparameters);} {}
  }
  decl {SUBnoteParameters *pars;} {private local
  }
  decl {SUBnoteharmonic *h[MAX_SUB_HARMONICS];} {private local
  }
  decl {SynthEngine *synth;} {private local
  }
  decl {int npart;} {private local
  }
  decl {int kititem;} {private local
  }
}
